<?php

namespace Lib;

use Lib\Exception\APIException;
use Lib\Http\APIRequest as Request;
use Lib\Http\APIResponse as Response;
use Lib\Router\Router;
use Swagger\Annotations as SWG;

/**
 * Gestion principale de l'API (analyse de la requête, correspondance avec les routes, etc...)
 * --------------
 * @SWG\Info(
 *      title="Pubeco API Developers",
 *      description="Please sign up at <a href='http://www.pubeco.fr/espace-pro'>pubeco.fr</a> for free account",
 *      contact="webmaster@pubeco.fr"
 * )
 * @SWG\ResponseMessages(
 *      partial = "common_error",
 *      @SWG\ResponseMessage(
 *          code=400,
 *          message="Unknown URL"
 *      ),
 *      @SWG\ResponseMessage(
 *          code=401,
 *          message="No API key found or API key disable"
 *      ),
 *      @SWG\ResponseMessage(
 *          code=403,
 *          message="Access to this resource is forbidden (ip or key restricted)"
 *      ),
 *      @SWG\ResponseMessage(
 *          code=404,
 *          message="Resource not found"
 *      ),
 *      @SWG\ResponseMessage(
 *          code=405,
 *          message="HTTP method not available with your API key"
 *      ),
 *      @SWG\ResponseMessage(
 *          code=500,
 *          message="Internal server error"
 *      )
 * )
 */
class Application
{
    /**
     * @var \Lib\Http\APIRequest
     */
    private $request;
    /**
     * @var \Lib\Http\APIResponse
     */
    private $response;
    /**
     * @var boolean
     */
    public static $debug;

    public function __construct()
    {
        $this->request = new Request();
        $this->response = new Response(API_URL);
        self::$debug = (array_key_exists('INTERFACE_WEB', $_SERVER) && 'VM' === $_SERVER['INTERFACE_WEB']) ? true : false;

        set_exception_handler([$this, 'exceptionHandler']);
    }

    /**
     * Lancement de l'application (API)
     */
    public function run()
    {
        $routes = Router::getRoutes();

        $uri = $this->request->getBaseURI();
        $httpMethod = strtolower($this->request->getMethod());
        /** @var \Lib\Router\Route $r */
        foreach($routes as $r) {
            // ******************
            // On parcourt les différentes routes enregistrées afin de trouver le bon contrôleur
            // ******************
            if(preg_match('#^'.$r->getPattern().'$#', $uri, $params) && $httpMethod == strtolower($r->getHttpMethod())) {
                array_shift($params);

                $className = '\\App\\Controller\\' . $r->getController();
                if(!class_exists($className))
                    throw new \Exception("Missing controller " . $r->getController() . " for route " . $uri, 500);

                $c = new $className($this->request, $this->response);
                if(!method_exists($c, $r->getAction()))
                    throw new \Exception("Missing action " . $r->getAction() . " in controller ".$r->getController()." for route " . $uri, 500);

                $this->request->setRoute($r);
                // Appel du "preController" s'il existe afin d'effectuer certaines actions (vérification prérequis, etc...)
                // avant de faire appel au contrôleur lui-même
                if(method_exists($c, 'preController')) {
                    $c->preController();
                }
                $response = call_user_func_array([$c, $r->getAction()], $params);

                if(!is_array($response) && !is_object($response))
                    throw new \Exception("Action " . $r->getAction() . " in controller ".$r->getController()." should return an array, " . gettype($response) . " given", 500);

                $this->response->sendJSON($response);
            }
        }

        // Si on arrive ici, c'est qu'aucune roure ne correspond
        // = erreur 400
        throw new \Exception("Unkwonw url " . $_SERVER['REQUEST_URI'], 400);
    }

    /**
     * Gestion centralisée des exceptions
     *
     * @param \Exception $e
     */
    public function exceptionHandler(\Exception $e)
    {
        switch($e->getCode()) {
            case 400:
                $message = "Unknown URL";
                break;
            case 401:
                $message = "No API key found or API key disable";
                break;
            case 403:
                $message = "Access to this resource is forbidden (ip or key restricted)";
                break;
            case 404:
                $message = "Resource not found";
                break;
            case 405:
                $message = "HTTP method not allowed";
                break;
            case 500:
                $message = "Internal server error";
                break;
            default:
                $message = $e->getMessage();
                break;
        }
        /*if(true === self::$debug)
            $message = $e->getMessage();*/

        $this->response->setHttpCode($e->getCode());

        // Si il y a une raison on l'indique dans le retour
        $details = '';
        if($e instanceof APIException)
            $details = $e->getDetails();

        $this->response->sendJSON(["message" => $message, "code" => $e->getCode(), "details" => $details]);
    }
}
